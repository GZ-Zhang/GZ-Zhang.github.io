[{"id":"977fdc579da19a42e22c99bb8addfd6a","title":"git问题记录","content":"git问题记录背景​        归纳git使用过程中遇到的各种问题，便于以后查询。\n问题1. git@github.com: Permission denied (publickey).\n\n\n\n\n\n\n\n\n参考链接：\nGit使用出现git@github.com: Permission denied (publickey). 处理\nGit报错：git@github.com: Permission denied (publickey)\n故障现象：\n\n\n\n\n\n\n\n\n\nZHANG@LAPTOP-A4NA7TDN MINGW64 ~/.ssh$ ssh -T &#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#99;&#111;&#109;&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;: Permission denied (publickey).\n解决方法：\n主要是思考流程\n\n\n\n\n\n\n\n\n\n第1步，git config –global –list 验证邮箱与GitHub注册时输入的是否一致\n第2步,  在C:\\Users\\ZHANG.ssh 查看是否生成秘钥，如果未生成生成秘钥\n第3步，查看github仓库，是否添加秘钥\n第4部，ssh -T &#103;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#x6f;&#109; 测试一下通不通，即可正常使用。不通就使用ssh-agent -s  和 ssh-add ~/.ssh/id_rsa 操作这两步。\n2. git 解决：The authenticity of host ‘[ssh.github.com]:443 ([192.30.253.123]:443)’ can’t be established.参考链接：https://blog.csdn.net/fearlessxmm/article/details/90401690\nZHANG@LAPTOP-A4NA7TDN MINGW64 &#x2F;d&#x2F;work&#x2F;blog\n$ ssh -T -p 443 git@ssh.github.com\nThe authenticity of host &#39;[ssh.github.com]:443 ([20.205.243.160]:443)&#39; can&#39;t be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF&#x2F;zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\n\n下面还有这样的提示：选择 yes\nAre you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes\nWarning: Permanently added &#39;[ssh.github.com]:443&#39; (ED25519) to the list of known hosts.\nHi GZ-Zhang! You&#39;ve successfully authenticated, but GitHub does not provide shell access.\n\n原来是少了一个known_hosts文件，本来密钥文件应该是三个，现在是两个，便报了这样的错误，此时选择yes回车之后，便可，同时生成了缺少了的known_hosts文件：\n然后，再试试git clone,如果还是报错的话，就将远程仓库对应的密钥删掉，重新将rsa.pub添加为新的密钥就可以了。\n3.Git ssh-config配置参考链接：https://www.cnblogs.com/JayYang/p/16436646.html  \n背景\n管理git生成的多个ssh key\n问题说明\n当有多个git账号的时候，比如一个github，用于自己进行一些开发活动，再来一个gitlab，一般是公司内部的git。这两者你的邮箱如果不同的话，就会涉及到一个问题，生成第二个git的key的时候会覆盖第一个的key，导致必然有一个用不了。\n解决方法我们可以在【~/.ssh】目录下新建一个config文件配置一下，就可以解决问题\n具体步骤\n生成第一个ssh key（这里我用的是github的邮箱）\n\nssh-keygen -t rsa -C &quot;milk_chocolate@126.com&quot;\n\n进入【C:\\Users\\用户名.ssh】，点击鼠标右键-选择Git bash here，这一步很重要，不然在下面输入密钥名称的时候，会将密钥生成在当前打开git bash的路径下，比如我在桌面打开的git bash，就会生成在桌面上，当然也可以在输入名称前将路径补全。如下图：\n这里我没有一路【回车】而是给生成的密钥命名为【id_rsa_github】,下面连续两次回车，没有给密钥设置密码（看个人需求）\n生成另一个ssh key（这里我用的公司邮箱）\n\n\n生成后的文件如下图所示：\n\n执行ssh-agent命令\n\nssh-agent就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程\n\n添加私钥\n\nssh-add ~&#x2F;.ssh&#x2F;id_rsa_github\nssh-add ~&#x2F;.ssh&#x2F;id_rsa_gitlab\n\n在执行上面的添加私钥命令时，如果出现如下错误：\n\n解决方法如下：1、输入如下命令查看已开启的ssh-agent线程\n\nps aux | grep ssh\n\n执行如下命令杀死线程：\nkill -9 线程号\n\n进入用户名目录下的.ssh目录，打开git bash，执行如下命令\nexec ssh-agent bash\neval ssh-agent -s\nssh-add .&#x2F;id_rsa_github\n\n再执行【ssh-add ./id_rsa_gitlab】将第二个私钥添加进去\n\n创建并修改config文件\n\n1、创建config文件，将文件创建在【.ssh】目录下①在windows下新建一个txt文本，然后将名字改成config（包括.txt后缀）②在git bash下,直接touch config即可创建一个config文件\n2、编辑config文件,修改如下内容：\n# github\nHost github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile ~&#x2F;.ssh&#x2F;id_rsa_github\nUser GZ-Zhang\n\n配置文件说明：每个账号单独配置一个Host，每个Host要取一个别名，每个Host主要配置HostName和IdentityFile两个属性即可Host的名字可以取为自己喜欢的名字，不过这个会影响git相关命令例如：Host mygithub 这样定义的话，命令如下，即git@后面紧跟的名字改为mygithubgit clone git@mygithub:PopFisher/AndroidRotateAnim.git就相当于你配置的HostName真正的域名，映射成了Host后面的配置的名字\nHostName                      #这个是真实的域名地址\nIdentityFile                  #这里是id_rsa的地址\nPreferredAuthentications      #配置登录时用什么权限认证--可设置publickey,password publickey,keyboard-interactive等\nUser                          #配置使用用户名\n\n【注意】不要在配置文件中添加下面这样的注释\nHostName git.glanway.com &#x2F;&#x2F;这里填你们公司的git网址即可\n\n这种注释在读取该配置文件时会导致报错，不被识别\n3、将公钥添加到github和gitlab上4、测试看到如下输出表示配置成功\nssh -T git@github.com          #测试github\nssh -T git@gitool.glanway.com   #测试gitlab\n\n\n\n4.bash: kill: : invalid signal specificationZHANG@LAPTOP-A4NA7TDN MINGW64 ~&#x2F;.ssh\n$ ps aux | grep ssh\n     1268       1    1268      35708  ?         197609 20:25:09 &#x2F;usr&#x2F;bin&#x2F;ssh-agent\n     1204       1    1204      31224  ?         197609 20:19:22 &#x2F;usr&#x2F;bin&#x2F;ssh-agent\n     1258    1163    1258      33016  ?         197609 20:25:03 &#x2F;usr&#x2F;bin&#x2F;ssh-agent\n     1247       1    1247      12316  ?         197609 20:24:23 &#x2F;usr&#x2F;bin&#x2F;ssh-agent\n\nZHANG@LAPTOP-A4NA7TDN MINGW64 ~&#x2F;.ssh\n$ kill -9 1247\n\nZHANG@LAPTOP-A4NA7TDN MINGW64 ~&#x2F;.ssh\n$ kill - 9 1258\nbash: kill: : invalid signal specification\n\n解决：\n#使用\n&#x2F;bin&#x2F;kill -9 pid\n\n\n\n\n\n5.OpenSSL SSL_read: Connection was reset, errno 10054起因\n执行hexo d 提交到github 提示OpenSSL SSL_read: Connection was reset, errno 10054\n\nZHANG@LAPTOP-A4NA7TDN MINGW64 &#x2F;d&#x2F;work&#x2F;blog&#x2F;GZ-Zhang.github.io (hexo)\n$ hexo d\nINFO  Validating config\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\nOn branch master\nnothing to commit, working tree clean\nfatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;GZ-Zhang&#x2F;GZ-Zhang.github.io.git&#x2F;&#39;: OpenSSL SSL_read: Connection was reset, errno 10054\nFATAL &#123;\n  err: Error: Spawn failed\n      at ChildProcess.&lt;anonymous&gt; (D:\\work\\blog\\GZ-Zhang.github.io\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      at ChildProcess.emit (events.js:315:20)\n      at ChildProcess.cp.emit (D:\\work\\blog\\GZ-Zhang.github.io\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)\n      at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:277:12) &#123;\n    code: 128\n  &#125;\n&#125; Something&#39;s wrong. Maybe you can find the solution here: %s https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html\nINFO Thanks for using Aurora v1.5.5\nINFO Check out the repo at: https:&#x2F;&#x2F;github.com&#x2F;auroral-ui&#x2F;hexo-theme-aurora\n\n\n经过\n这是服务器的SSL证书没有经过第三方机构的签署，所以报错。错误原因可能是网络不稳定，连接超时造成的，如果你试了多次还是报这个错误，建议你执行下面的命令\n解决办法\ngit config --global http.sslVerify &quot;false&quot;\n\n或者在.git配置文件中添加如下配置\n[core]\n\trepositoryformatversion &#x3D; 0\n\tfilemode &#x3D; false\n\tbare &#x3D; false\n\tlogallrefupdates &#x3D; true\n\tsymlinks &#x3D; false\n\tignorecase &#x3D; true\n[remote &quot;origin&quot;]\n\turl &#x3D; https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;Secondary-development-component.git\n\tfetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*\n\n#加入这两个\t\n[http]\n sslverify &#x3D; false\n \n[https]\n sslverify &#x3D; false\n\n\n参考链接：https://blog.csdn.net/wjh1840226173/article/details/124355167\n总结\n多数情况下国内访问 Github 会被…，或因网络波动问题推送失败。推荐使用 SSH 方式拉去代码或者参考**GitHub520**修改本机 hosts 文件解决访问问题\n","slug":"Git/git问题记录","date":"2022-11-25T10:53:51.000Z","categories_index":"git,问题记录","tags_index":"git","author_index":"Guzong"},{"id":"59157d35f2c305377f2310cdfdd9d9c3","title":"hexo部署到Github","content":"GitHub Pages 快速入门\n\n\n\n\n\n\n\n\n官方文档；https://docs.github.com/cn/pages\n1. 新建github仓库​    仓库名称限制为：用户名+.github.io\n\n2. 安装hexo上传插件npm install hexo-deployer-git --save\n\n3. 修改hexo配置文件指定仓库路径可在文件夹中直接打开文件，也可通过vim直接编辑,如下图\nvim _config.yml \n#找到Deployment\ndeploy:  \n\ttype: git  \n\trepo: 你的github仓库路径  \n\tbranch: master\n\n\n\n4. 推送站点到githubhexo d\n\n推送过程中需要输入你的github用户名和密码。但是在2021年8月14日开始github官方就加强安全访问。不能通过原有账号密码git访问，密码需要用官方的token或者采用ssh公私钥访问。否则会出现下图：鉴权失败（用户名密码错误）\n官方文档:https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls\n\n\n\n\n\n\n\n\n\nCloning with HTTPS URLs\nThe https:// clone URLs are available on all repositories, regardless of visibility. https:// clone URLs work even if you are behind a firewall or proxy.\nWhen you git clone, git fetch, git pull, or git push to a remote repository using HTTPS URLs on the command line, Git will ask for your GitHub username and password. When Git prompts you for your password, enter your personal access token. Alternatively, you can use a credential helper like Git Credential Manager. Password-based authentication for Git has been removed in favor of more secure authentication methods. For more information, see “Creating a personal access token.”\n\n\n\n\n\n\n\n\n\n机翻：当你使用命令行上的HTTPS url将git克隆、获取、提取或推送到远程存储库时，git会询问你的GitHub用户名和密码。当Git提示您输入密码时，输入您的个人访问令牌。或者，也可以使用像Git credential Manager这样的凭证帮助器。Git的基于密码的身份验证已经被删除，取而代之的是更安全的身份验证方法。有关更多信息，请参见“创建个人访问令牌”。\n大概意思就是用户密码不可用了，需要使用户加token验证方式\n登录github 设置setting-&gt;Developer Settings-&gt;Prosonal access tokens 创建一个新token。然后就可以拿这个token当密码输入了。\n\n用户名和token输入后，上传成功。\n5、访问输入你的仓库名称,即可访问成功。\nhttps://gz-zhang.github.io/\n\n","slug":"blog/hexo部署到Github","date":"2022-11-24T15:27:00.000Z","categories_index":"","tags_index":"blog","author_index":"Guzong"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-11-24T15:06:09.004Z","categories_index":"","tags_index":"PS3,Games","author_index":"Guzong"},{"id":"c868eee24d603547e6f7a305ed68a45b","title":"解决hexo博客中插入图片失败","content":"解决hexo博客中插入图片失败前言：​        搭建博客后按照官方文档配置后，图片一直无法显示，在网上百度一直没有解决方案，最终在官方文档评论区发现解决方案。思考了一下，遇到问题如果有评论区还是要优先查看一下再去百度，大家遇到相似问题概率比较大，还是要感谢评论区大神，推荐详细阅读第一个参考链接，启发很大。\n\n\n\n\n\n\n\n\n\n参考链接：\nhexo博客中插入图片失败——解决思路及个人最终解决办法\nhexo+github快速搭建html5静态网页全过程\n解决方案：1. 官网解决方案\n\n\n\n\n\n\n\n\n官方文档：https://hexo.io/zh-cn/docs/asset-folders\n使用 Markdown 嵌入图片hexo-renderer-marked 3.1.0 引入了一个新的选项，其允许你无需使用 asset_img 标签插件就可以在 markdown 中嵌入图片\n如需启用：\n_config.yml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n\n启用后，资源图片将会被自动解析为其对应文章的路径。例如： image.jpg 位置为 /2020/01/02/foo/image.jpg ，这表示它是 /2020/01/02/foo/ 文章的一张资源图片， ![](image.jpg) 将会被解析为 &lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;\n2. 百度搜索得到解决方案\n方法1：设置图片直接引用网络资源\n方法2：使用hexo-asset-image插件\n\n方案一可以选择将markdown图片文件存放在云中，编写时直接引用云资源，考虑目前暂时还不需要所以放弃，选择方案二\n方法2：使用hexo-asset-image插件\n打开根目录下_config.yml文件找到post_asset_folder: true 设置为true,在下面添加(可参靠上文，官网解决方案：使用 Markdown 嵌入图片)：\nmarked:\n  prependRoot: true\n  postAsset: true\n安装插件\nnpm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save\n可以选择将Typora设置为./${filename} ，目的是自动在目录下建立与文件同名的文件夹方便存取\n\n\n\n发布到远端前需要在md中把图片的路径都删去前面的xxx/，但目前还没有找到更好的替代方法。\n注意\n若要上传服务器，图片引用链接应直接保存文件名即可，放入博客同名文件下即可。\n\n\n\n","slug":"解决hexo博客中插入图片失败","date":"2022-11-17T10:15:39.000Z","categories_index":"blogs","tags_index":"blog","author_index":"Guzong"},{"id":"7039b3832616e1bd4046358fa2a1004f","title":"博客集成评论功能---Gitalk","content":"博客集成评论功能—Gitalk一、什么是 GitalkGitalk 的官方网站地址是: gitalk.github.io，是一个基于 GitHub Issue 和 Preact 开发的评论插件。\n二、特性\n使用 GitHub 登录\n支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru, de, pl, ko, fa, ja]\n支持个人或组织\n无干扰模式（设置 distractionFreeMode 为 true 开启）\n快捷键提交评论 （cmd|ctrl + enter）\n\n三、安装两种方式\n直接引入\n\n&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;\n\n&lt;!-- or --&gt;\n\n&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;gitalk&#x2F;dist&#x2F;gitalk.css&quot;&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;gitalk&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;\n\n\nnpm 安装\n\nnpm i --save gitalk\nimport &#39;gitalk&#x2F;dist&#x2F;gitalk.css&#39;\nimport Gitalk from &#39;gitalk&#39;\n\n四、使用\n首先，您需要选择一个公共github存储库（已存在或创建一个新的github存储库）用于存储评论，\n\n\n创建完成后，点击Settings 打开 Issues 功能，默认是打开的\n\n然后需要创建 GitHub Application，如果没有 点击这里申请，Authorization callback URL 填写当前使用插件页面的域名。\n\n开创建应用程序页面，填写信息，两个 URL 就是你网站的域名。应用名称与描述可自起。 可参考下图\n\n\n应用程序创建成功后跳转到了以下页面，图中 Client ID 和 Client Secret是我们需要的东西\n\n\n\n五、集成 Gitalk方式一只需要将如下代码引入你想添加评论的 html 或者 jsp 页面中就可以使用了\n&lt;!-- 引入 --&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;\n  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;\n\n&lt;!-- 在页面中添加一个容器--&gt;\n&lt;div id&#x3D;&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt;\n\n使用下面的 Javascript 代码生成 gitalk 插件\n var gitalk &#x3D; new Gitalk(&#123;   \n     clientID: &#39;GitHub Application Client ID&#39;,   &#x2F;&#x2F;GitHub Application Client ID\n     clientSecret: &#39;GitHub Application Client Secret&#39;,   &#x2F;&#x2F;GitHub Application Client Secret\n     repo: &#39;GitHub repo&#39;,   &#x2F;&#x2F;仓库名称(GitHub repo)\n     owner: &#39;GitHub repo owner&#39;,   &#x2F;&#x2F;仓库拥有者(GitHub repo owner) \n     admin: [&#39;GitHub repo owner and collaborators, only these guys can initialize github issues&#39;],   \n     id: location.pathname,      &#x2F;&#x2F; 请确保你的 location 连接小于 50 个字符，否则，插件会生成失败   \n     distractionFreeMode: false &#x2F;&#x2F; 专注模式 \n&#125;)  \n\n    gitalk.render(&#39;gitalk-container&#39;)\n\n方式二使用react的组件：\nimport GitalkComponent from &#39;gitalk&#x2F;dist&#x2F;gitalk-component&#39;\n\n&lt;GitalkComponent\n options&#x3D;&#123;&#123;\n clientID: &#39;223232323adawdawd&#39;,\n clientSecret: &#39;ddadawdadaddawdawdawdawdwadawd&#39;,\n repo: &#39;dailyProject&#39;,\n owner: &#39;Mrrabbitan&#39;,\n admin: [&#39;Mrrabbitan&#39;],\n id: location.pathname, &#x2F;&#x2F; Ensure uniqueness and length less than 50\n distractionFreeMode: false, &#x2F;&#x2F; Facebook-like distraction free mode\n        &#125;&#125;\n &gt;&lt;&#x2F;GitalkComponent&gt;\n\n总结以上就是添加gitalk详细步骤，具体操作可参考官方文档：https://github.com/gitalk/gitalk/blob/master/readme-cn.md\n注意\n如若第一次进入时评论模块加载不出来，需要注册 Github Application 的账号登录评论模块后刷新页面，就可以正常使用了。\nGitHub 对 Issue 的 label 存在限制，不能超过 50 个字符。\nPS: label 标签就是文章页面的链接地址，如果地址过长，会导致加载 Gitalk 插件失败。\n解决方案，可参考链接：https://github.com/gitalk/gitalk/issues/102\n\n\n\n参考文章：\n平酱的填坑札记：博客集成评论功能—Gitalk\n超Ren专属：超 Nice 的评论组件 —— Gitalk\n官方文档：https://github.com/gitalk/gitalk/blob/master/readme-cn.md\n","slug":"博客集成评论功能-Gitalk","date":"2022-11-17T08:53:51.000Z","categories_index":"","tags_index":"blog","author_index":"Guzong"},{"id":"8efdfe4872c447599d42e0a8f10aa3e3","title":"Hexo搭建博客","content":"参考官方文档：https://hexo.io/zh-cn/\n前言​        作为技术人员，都希望拥有一个自己的技术博客，在查阅资料选择Hexo+Github的博客系统，这里将其过程记录下来。\n\n\n\n\n\n\n\n\n\n博客部署在linux环境下, CentOS 7.x\n安装前提安装 Hexo 相当简单，只需要先安装下列应用程序即可：\n\nNode.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)\nGit\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 安装 Hexo 步骤。\n如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n安装 Git两种方式：在线安装（不推荐），解压安装。\n\n在线安装（使用yum安装的版本为1.8.3，这个版本太老）\nyum install git\ngit --version\n解压安装\n想要使用最新版的git，进入git 在GitHub上发布版本页面：https://github.com/git/git/tags  选择最新的tar.gz包下载即可。\n# 1. 上传到指定目录 &#x2F;opt&#x2F;software\n# 2. 解压到当前目录\ntar -zxvf git-2.38.1.tar.gz\nrm -rf git-2.9.5.tar.gz \n# 进入到解压后的文件夹\ncd  .&#x2F;git-2.38.1\n# 3. 解压后的源码需要编译源码，不过在此之前需要安装编译所需要的依赖。中途出现提示的时候输入y即可\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker\n# 4. 安装依赖时，自动安装了Git，因此需要卸载旧版本Git\ngit --version\nyum remove git\n# 5. 编译git源码\nmake prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git all\n# 6. 安装git至&#x2F;usr&#x2F;local&#x2F;git路径\nmake prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git install\n\n# 配置环境变量配置\nvim &#x2F;etc&#x2F;profile\n\n# 在最底部加上\nPATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin\nexport PATH\n\n# 刷新环境变量\nsource &#x2F;etc&#x2F;profile\n# 查看Git是否安装完成\ngit --version\n\n参考文章：\nhttps://blog.csdn.net/w_shimmer/article/details/124342141\nhttps://blog.csdn.net/weixin_43847283/article/details/124781559\n\n\n安装 node\n查看系统位数\n\nuname -a\n\n\n官网下载对应文件\n\n\n\n下载下来的tar文件上传到服务器并且解压，然后通过建立软连接变为全局\ncd &#x2F;opt&#x2F;software\n# 上传文件\ntar -zxvf node-v16.18.0-linux-x64.tar.xz \n# 删除压缩包\nrm -rf node-v16.18.0-linux-x64.tar.xz \n# 重命名\nmv node-v16.18.0-linux-x64&#x2F; node\n# 确认一下nodejs下bin目录是否有node 和npm文件\ncd node&#x2F;bin\nls\n\n\n# 建立软连接，变为全局\nln -s &#x2F;opt&#x2F;software&#x2F;node&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin\nln -s &#x2F;opt&#x2F;software&#x2F;node&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin\n检验\nnode -v\nnpm -v\n\n参考文章：\nhttps://blog.csdn.net/weixin_43847283/article/details/124781443\n\n\n安装Hexo\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\ncd &#x2F;opt&#x2F;software\nmkdir hexo\ncd hexo&#x2F;\nnpm install -g hexo-cli\n\n\nhexo在nodejs的nodejs/bin目录可以找到hexo命令，采用软连接把hexo命令添加到全局\n\n# 根据个人nodejs路径进行配置\nln -s &#x2F;opt&#x2F;software&#x2F;node&#x2F;bin&#x2F;hexo   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;hexo\n# 配置错了可以删除再重新配置\nrm -rf  &#x2F;usr&#x2F;local&#x2F;bin&#x2F;hexo\nln -s &#x2F;opt&#x2F;software&#x2F;node&#x2F;bin&#x2F;hexo   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;hexo\n\n\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n\n查看是否生效\nhexo -v\n\n\n部署hexo\n\nhexo init blog\ncd blog\nnpm install\n# 启动\nhexo s\n\n参考链接：\nhttps://blog.csdn.net/weixin_43847283/article/details/124781731\n","slug":"Hexo搭建博客","date":"2022-11-16T08:45:34.000Z","categories_index":"","tags_index":"blog","author_index":"Guzong"}]